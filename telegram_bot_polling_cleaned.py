#!/usr/bin/env python3
"""
Wild Ginger Bot - ORIGINAL FILE (Cleaned Version)
This file contains only the parts NOT YET refactored to the new architecture.

REFACTORED PARTS (now in telegram_bot/ directory):
- ‚úÖ Basic configuration (config/settings.py)
- ‚úÖ Google Sheets operations (services/sheets_service.py)  
- ‚úÖ Message handling (services/message_service.py)
- ‚úÖ Basic bot commands: /start, /status, /help (main.py)
- ‚úÖ Data models (models/registration.py)

REMAINING PARTS TO MIGRATE:
- [ ] Admin commands (/admin_*)
- [ ] Partner reminders (/remind_partner) 
- [ ] Get-to-know conversation flow
- [ ] Cancellation workflow
- [ ] Reminder scheduler system
- [ ] Sheet monitoring
"""

import os
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# Load environment variables
load_dotenv()

# Bot token
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# Store user -> submission_id mapping (will be handled by refactored services)
user_submissions = {}

# NOTE: The following imports would come from the refactored services:
# from telegram_bot.services import SheetsService, MessageService
# from telegram_bot.config import settings

# For now, we'll use the old functions that are still here
# These will be removed once we fully migrate to the refactored architecture

# --- ADMIN COMMANDS (‚úÖ MIGRATED to AdminService) ---
# This functionality has been moved to:
# - telegram_bot/services/admin_service.py
# - telegram_bot/handlers/admin_commands.py
#
# Features migrated:
# ‚úÖ Admin dashboard with statistics
# ‚úÖ Registration approval/rejection workflow
# ‚úÖ Detailed status checking  
# ‚úÖ Weekly digest generation
# ‚úÖ Admin permission checking
# ‚úÖ User and admin notifications
#
# Available in refactored bot via /admin_* commands

# --- PARTNER REMINDERS (‚úÖ MIGRATED to ReminderService) ---
# This functionality has been moved to:
# - telegram_bot/services/reminder_service.py
# - telegram_bot/handlers/reminder_commands.py
# 
# Available in refactored bot via /remind_partner command

# --- CANCELLATION WORKFLOW (‚úÖ MIGRATED to CancellationService) ---
# This functionality has been moved to:
# - telegram_bot/services/cancellation_service.py
# - telegram_bot/handlers/cancellation_commands.py
#
# Features migrated:
# ‚úÖ User registration cancellation with reason
# ‚úÖ Last-minute cancellation detection
# ‚úÖ Google Sheets status updates
# ‚úÖ Multilingual cancellation messages
# ‚úÖ Admin-initiated cancellations
# ‚úÖ Cancellation statistics and reporting
# ‚úÖ Comprehensive error handling
#
# Available in refactored bot via /cancel command

# --- GET-TO-KNOW CONVERSATION FLOW (‚úÖ MIGRATED to ConversationService) ---
# This functionality has been moved to:
# - telegram_bot/services/conversation_service.py 
# - telegram_bot/handlers/conversation_commands.py
#
# Features migrated:
# ‚úÖ Multi-step conversation flow
# ‚úÖ Boring answer detection
# ‚úÖ Automatic follow-up questions
# ‚úÖ Response storage in Google Sheets
# ‚úÖ State management
#
# Available in refactored bot via /get_to_know command

# --- BACKGROUND REMINDER SCHEDULER (‚úÖ MIGRATED to BackgroundScheduler) ---
# This functionality has been moved to:
# - telegram_bot/services/background_scheduler.py
#
# Features migrated:
# ‚úÖ Automatic reminder checking and scheduling
# ‚úÖ Partner reminder automation
# ‚úÖ Payment reminder automation  
# ‚úÖ Group opening reminders
# ‚úÖ Weekly digest automation
# ‚úÖ Background task management
# ‚úÖ Interval-based scheduling
# ‚úÖ Error handling and recovery
#
# Available in refactored bot via BackgroundScheduler service

# --- SHEET MONITORING (‚úÖ MIGRATED to MonitoringService) ---
# This functionality has been moved to:
# - telegram_bot/services/monitoring_service.py
# - telegram_bot/handlers/monitoring_commands.py
#
# Features migrated:
# ‚úÖ Sheet1 automatic monitoring (5-minute intervals)
# ‚úÖ New registration detection and duplication
# ‚úÖ Column mapping between Sheet1 and managed sheet
# ‚úÖ Admin notification system for new registrations
# ‚úÖ Manual monitoring triggers for admin control
# ‚úÖ Monitoring status reporting and management
# ‚úÖ Background task lifecycle management
# ‚úÖ Comprehensive error handling and recovery
#
# Available in refactored bot via MonitoringService and /admin_monitoring_* commands

# --- MAIN BOT SETUP ---

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ==========================================
    # NOTE: Basic commands (/start, /status, /help) are now handled by
    # the refactored bot in telegram_bot/main.py
    # These should be removed from here to avoid conflicts
    # ==========================================

    # ADMIN COMMANDS (‚úÖ MIGRATED to AdminService)
    # app.add_handler(CommandHandler("admin_dashboard", admin_dashboard))  # ‚úÖ MIGRATED  
    # app.add_handler(CommandHandler("admin_approve", admin_approve))      # ‚úÖ MIGRATED
    # app.add_handler(CommandHandler("admin_reject", admin_reject))        # ‚úÖ MIGRATED
    # app.add_handler(CommandHandler("admin_status", admin_status))        # ‚úÖ MIGRATED
    # app.add_handler(CommandHandler("admin_digest", admin_digest))        # ‚úÖ MIGRATED

    # USER COMMANDS (‚úÖ MIGRATED to respective services)  
    # app.add_handler(CommandHandler("remind_partner", remind_partner))      # ‚úÖ MIGRATED to ReminderService
    # app.add_handler(CommandHandler("get_to_know", get_to_know_command))    # ‚úÖ MIGRATED to ConversationService
    # app.add_handler(CommandHandler("cancel", cancel_registration))         # ‚úÖ MIGRATED to CancellationService

    # MESSAGE HANDLERS (to be migrated to ConversationService)
    # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_get_to_know_response))  # ‚úÖ MIGRATED

    # Bot command setup
    async def setup_bot_commands():
        """Set up bot commands - will be handled by refactored main.py"""
        commands = [
            # BotCommand("admin_dashboard", "Admin: View registration dashboard"),  # ‚úÖ MIGRATED
            # BotCommand("admin_approve", "Admin: Approve registration"),           # ‚úÖ MIGRATED
            # BotCommand("admin_reject", "Admin: Reject registration"),             # ‚úÖ MIGRATED
            # BotCommand("remind_partner", "Send reminder to partner"),             # ‚úÖ MIGRATED
            # BotCommand("get_to_know", "Complete get-to-know section"),            # ‚úÖ MIGRATED
            # BotCommand("cancel", "Cancel registration"),                          # ‚úÖ MIGRATED
        ]
        
        try:
            await app.bot.set_my_commands(commands)
            print("‚úÖ Legacy bot commands set up")
        except Exception as e:
            print(f"‚ùå Error setting up commands: {e}")

    # Background task initialization (‚úÖ MIGRATED)
    async def post_init(application):
        """Initialize background tasks"""
        await setup_bot_commands()
        
        # All background tasks now handled by refactored bot
        print("‚úÖ Background tasks managed by telegram_bot/main.py")

    app.post_init = post_init

    print("ü§ñ Starting LEGACY bot (NOW EMPTY - MIGRATION COMPLETE!)...")
    print("üéâ NOTE: ALL features are now handled by telegram_bot/main.py")
    print("üìã No remaining features - migration complete!")
    print("")
    print("‚úÖ Fully migrated microservices:")
    print("   - Partner reminders ‚Üí ReminderService")
    print("   - Get-to-know flow ‚Üí ConversationService")
    print("   - Admin commands ‚Üí AdminService")
    print("   - Background scheduler ‚Üí BackgroundScheduler")
    print("   - Cancellation workflow ‚Üí CancellationService")
    print("   - Sheet monitoring ‚Üí MonitoringService")
    print("")
    print("üèÜ MIGRATION 100% COMPLETE! ABSOLUTE PERFECTION ACHIEVED!")

    try:
        app.run_polling(drop_pending_updates=True)
    except Exception as e:
        print(f"‚ùå Error starting legacy bot: {e}")
        exit(1) 